package minows

import (
	"go.dedis.ch/dela/serde/json"
	"regexp"
	"strings"

	"github.com/libp2p/go-libp2p"
	"github.com/libp2p/go-libp2p/core/crypto"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/core/protocol"
	ma "github.com/multiformats/go-multiaddr"
	"go.dedis.ch/dela/mino"
	"go.dedis.ch/dela/serde"
	"golang.org/x/xerrors"
)

// Minows implements mino.Mino
// TODO unit tests
type minows struct {
	myAddr   address
	segments []string
	host     host.Host
	rpcs     map[string]rpc
	context  serde.Context
}

// NewMinows
// listen: local listening address in multiaddress format, e.g. /ip4/0.0.0.0/tcp/80
// public: public dial-able address in multiaddress format, e.g. /dns4/p2p-1.c4dt.dela.org/tcp/443/wss
// identity: Peer ID (multi-hash of public key generated by libp2p)
func NewMinows(listen, public ma.Multiaddr, privKey crypto.PrivKey) (*minows, error) {
	id, err := peer.IDFromPrivateKey(privKey)
	if err != nil {
		return nil, xerrors.Errorf("could not get Peer ID: %v", err)
	}
	myAddr, err := newAddress(public, id)
	if err != nil {
		return nil, xerrors.Errorf("could not create address: %v", err)
	}
	// create host & start listening
	// TODO populate peer store with multiaddr & peer IDs of other peers
	h, err := libp2p.New(libp2p.ListenAddrs(listen), libp2p.Identity(privKey))
	if err != nil {
		return nil, xerrors.Errorf("could not create host: %v", err)
	}

	return &minows{
		myAddr:   myAddr,
		segments: nil,
		host:     h,
		context:  json.NewContext(),
	}, nil
}

func (m *minows) GetAddressFactory() mino.AddressFactory {
	return addressFactory{}
}

func (m *minows) GetAddress() mino.Address {
	return m.myAddr
}

func (m *minows) WithSegment(segment string) mino.Mino {
	if segment == "" {
		return m
	}

	return &minows{
		myAddr:   m.myAddr,
		segments: append(m.segments, segment),
	}
}

func (m *minows) CreateRPC(name string, h mino.Handler, f serde.Factory) (mino.RPC, error) {
	pattern := regexp.MustCompile("^[a-zA-Z0-9]+$")
	// validate segments
	if len(m.rpcs) == 0 { // no RPC created yet
		for _, seg := range m.segments {
			if !pattern.MatchString(seg) {
				return nil, xerrors.Errorf("invalid segment: %s", seg)
			}
		}
	}
	// validate name
	if !pattern.MatchString(name) {
		return nil, xerrors.Errorf("invalid name: %s", name)
	}
	if _, ok := m.rpcs[name]; ok {
		return nil, xerrors.Errorf("already exists rpc: %s", name)
	}
	uri := strings.Join(append(m.segments, name), "/")
	// TODO wrap mino.Handler in network.StreamHandler
	//  to handle Call() with Process() and Stream() with Stream()
	// TODO m.host.SetStreamHandler(identity, h)
	// TODO when to return pointer vs struct?
	return rpc{
		uri:     protocol.ID(uri),
		mino:    m,
		factory: f,
		context: m.context,
	}, nil
}
